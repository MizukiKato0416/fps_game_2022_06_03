//=============================================================================
// シーン2D処理 [Scene2D.cpp]
// Author : 佐藤秀亮
//=============================================================================
//=============================================================================
// インクルード
//=============================================================================
#include "Scene2D.h"
#include "manager.h"
#include "Renderer.h"

//=============================================================================
// マクロ
//=============================================================================

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================

//=============================================================================
// コンストラクタ
//=============================================================================
CScene2D::CScene2D(PRIORITY priorty) : CObject(priorty)
{
	m_pVtxBuff = NULL;

	m_Texpos = 0;
	m_TexSize = 0;
}

//=============================================================================
// デストラクタ
//=============================================================================
CScene2D::~CScene2D()
{

}

//=============================================================================
// ポリゴンの初期化
//=============================================================================
HRESULT CScene2D::Init()
{
	// 頂点情報を設定
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();//デバイスの取得

	 //頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4, D3DUSAGE_WRITEONLY, FVF_VERTEX_2D, D3DPOOL_MANAGED, &m_pVtxBuff, NULL);
	VERTEX_2D*pVtx;//頂点情報へのポインタ


	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点の座標
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - (m_Size.x / 2), m_pos.y - (m_Size.y / 2), 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + (m_Size.x / 2), m_pos.y - (m_Size.y / 2), 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - (m_Size.x / 2), m_pos.y + (m_Size.y / 2), 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + (m_Size.x / 2), m_pos.y + (m_Size.y / 2), 0.0f);

	//rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	//頂点の色
	pVtx[0].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[1].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[2].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[3].col = D3DCOLOR_RGBA(255, 255, 255, 255);

	//テクスチャのUV座標
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();


	return S_OK;
}

//=============================================================================
// ポリゴンの終了
//=============================================================================
void CScene2D::Uninit()
{

	//頂点バッファも破棄
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}

	//オブジェクト破棄
	Release();
}


//=============================================================================
// ポリゴンの更新
//=============================================================================
void CScene2D::Update()
{

	VERTEX_2D*pVtx;//頂点情報へのポインタ

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点の座標
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - (m_Size.x / 2), m_pos.y - (m_Size.y / 2), 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + (m_Size.x / 2), m_pos.y - (m_Size.y / 2), 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - (m_Size.x / 2), m_pos.y + (m_Size.y / 2), 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + (m_Size.x / 2), m_pos.y + (m_Size.y / 2), 0.0f);

	//rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();

}

//=============================================================================
// ポリゴンの描画
//=============================================================================
void CScene2D::Draw()
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();//デバイスのポインタ
	LPDIRECT3DTEXTURE9 buf = CManager::GetInstance()->GetTexture()->GetTexture(m_pTexture);

	//アルファテスト関係
	pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, TRUE);
	pDevice->SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);
	pDevice->SetRenderState(D3DRS_ALPHAREF, 0);

	//頂点バッファをデバイスのデータストリームに設定
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);//頂点フォーマットの設定

	if (buf != NULL)
	{
		pDevice->SetTexture(0, buf);//テクスチャの設定
	}
	else
	{
		pDevice->SetTexture(0, NULL);//テクスチャの設定
	}

	// ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

	//アルファテスト関係
	pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);
	pDevice->SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_ALWAYS);
	pDevice->SetRenderState(D3DRS_ALPHAREF, 0x00);

}

//=============================================================================
// テクスチャ情報セット(テクスチャパターンの更新)
//=============================================================================
void CScene2D::SetTex(int Texpos, float TexSize)
{
	m_Texpos = Texpos;
	m_TexSize = TexSize;

	//一枚絵と分けるためここで更新
	VERTEX_2D*pVtx;//頂点情報へのポインタ
				   //頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//テクスチャのUV座標
	pVtx[0].tex = D3DXVECTOR2(m_Texpos * m_TexSize, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(m_Texpos * m_TexSize + m_TexSize, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(m_Texpos * m_TexSize, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(m_Texpos * m_TexSize + m_TexSize, 1.0f);

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();

}

//=============================================================================
// テクスチャ情報セット(背景スクロール)
//=============================================================================
void CScene2D::TexMove(float TexMoveU, float TexMoveV)
{
	m_TexMoveU = TexMoveU;
	m_TexMoveV = TexMoveV;
	m_PosTexV += m_TexMoveV;

	if (m_PosTexV >= 1.0f)
	{
		m_PosTexV -= 1.0f;
	}
	else if (m_PosTexV < 0.0f)
	{
		m_PosTexV += 1.0f;
	}

	if (m_TexMoveU >= 1.0f)
	{
		m_TexMoveU -= 1.0f;
	}
	else if (m_TexMoveU < 0.0f)
	{
		m_TexMoveU += 1.0f;
	}

	//一枚絵と分けるためここで更新
	VERTEX_2D*pVtx;//頂点情報へのポインタ
	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//テクスチャのUV座標
	pVtx[0].tex = D3DXVECTOR2(m_TexMoveU, m_PosTexV);
	pVtx[1].tex = D3DXVECTOR2(m_TexMoveU + 1.0f, m_PosTexV);
	pVtx[2].tex = D3DXVECTOR2(m_TexMoveU, m_PosTexV + 1.0f);
	pVtx[3].tex = D3DXVECTOR2(m_TexMoveU + 1.0f, m_PosTexV + 1.0f);

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();
}

//=============================================================================
// ゲージ型のサイズ変更
//=============================================================================
void CScene2D::SetGaugeScele(float Whidth, float Hight)
{
	VERTEX_2D*pVtx;//頂点情報へのポインタ

	m_Size.x = Whidth;
	m_Size.y = Hight;

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点の座標
	pVtx[0].pos = D3DXVECTOR3(m_pos.x, m_pos.y - (m_Size.y / 2), 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + (m_Size.x * 4), m_pos.y - (m_Size.y / 2), 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x, m_pos.y + (m_Size.y / 2), 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + (m_Size.x * 4), m_pos.y + (m_Size.y / 2), 0.0f);

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();

}

//=============================================================================
// ポリゴン情報セット(カラー)
//=============================================================================
void CScene2D::ColorChange(D3DCOLORVALUE color)
{
	VERTEX_2D*pVtx;//頂点情報へのポインタ

				   //頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点の色
	pVtx[0].col = D3DCOLOR_RGBA((int)color.r, (int)color.g, (int)color.b, (int)color.a);
	pVtx[1].col = D3DCOLOR_RGBA((int)color.r, (int)color.g, (int)color.b, (int)color.a);
	pVtx[2].col = D3DCOLOR_RGBA((int)color.r, (int)color.g, (int)color.b, (int)color.a);
	pVtx[3].col = D3DCOLOR_RGBA((int)color.r, (int)color.g, (int)color.b, (int)color.a);

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();

}

//=============================================================================
// ポリゴン情報セット(フェードカラー)
//=============================================================================
void CScene2D::FadeColorChange(int Alpha)
{
	VERTEX_2D*pVtx;//頂点情報へのポインタ

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点の色
	pVtx[0].col = D3DCOLOR_RGBA(255, 255, 255, Alpha);
	pVtx[1].col = D3DCOLOR_RGBA(255, 255, 255, Alpha);
	pVtx[2].col = D3DCOLOR_RGBA(255, 255, 255, Alpha);
	pVtx[3].col = D3DCOLOR_RGBA(255, 255, 255, Alpha);

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();
}

//=============================================================================
// ポリゴン情報セット(回転)
//=============================================================================
void CScene2D::SetRotate(D3DXVECTOR3 pos, float Rotate, float Rotate2, float Vectol)
{
	VERTEX_2D*pVtx;//頂点情報へのポインタ

	m_pos = pos;

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点の座標
	pVtx[0].pos = D3DXVECTOR3(pos.x - (sinf(Rotate)) * Vectol, pos.y - (cosf(Rotate))* Vectol, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(pos.x - (cosf(-Rotate)) * Vectol, pos.y - (sinf(-Rotate))* Vectol, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(pos.x + (cosf(-Rotate)) * Vectol, pos.y + (sinf(-Rotate))* Vectol, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(pos.x + (sinf(Rotate)) * Vectol, pos.y + (cosf(Rotate))* Vectol, 0.0f);

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();
}

//=============================================================================
// ポリゴン情報セット(pos)
//=============================================================================
void CScene2D::SetPosition(D3DXVECTOR3 pos)
{
	m_pos = pos;

	CScene2D::Update();
}
//=============================================================================
// ポリゴン情報セット(Hight)
//=============================================================================
void CScene2D::SetHight(float Hight)
{
	m_Size.y = Hight;
	//CScene2D::Update();
}

//=============================================================================
// ポリゴン情報セット(Whidth)
//=============================================================================
void CScene2D::SetWhidth(float Whidth)
{
	m_Size.x = Whidth;
	//CScene2D::Update();
}
